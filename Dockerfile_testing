#syntax = docker / dockerfile : 1.4.1
FROM ubuntu : 20.04 AS build

#Set environment variables
        ENV PATH "/usr/bin:$PATH" ENV POETRY_INSTALLER_MAX_WORKERS 8

#Install system dependencies
    RUN apt
    - get update&& apt - get install - y-- no - install
    - recommends python3 python3 - pip python3 - dev python3 - venv build
    - essential ca - certificates curl git&& rm - rf / var / lib / apt / lists/*

SHELL ["/bin/bash", "-c"]

# Install Poetry
RUN curl -sSL https://install.python-poetry.org

# Copy the project files
COPY . /pythontemplate

# Set the working directory
WORKDIR /pythontemplate

# Create and activate the virtual environment, name cannot be `.venv`, must be `venv` without the dot.
# and all must be in one 'line' because each `RUN` commands is executed in a 'fresh' shell
RUN python3 -m venv venv
RUN source venv/bin/activate && \
    venv/bin/pip install poetry && \
    # # Install dependencies using Poetry \
    venv/bin/poetry install --no-root --without=docs && \
    # # Build the package in source distribution format
    venv/bin/poetry build --format sdist && \
    # # Install the package using pip \
    venv/bin/pip install dist/*.tar.gz && \
    # Run tests with coverage \
    venv/bin/pytest --cov=. -s -vv

# Final stage to run the application (optional)
FROM ubuntu:20.04 as testing

# Set environment variables for the final image
ENV PATH "/usr/bin:$PATH"

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy the installed package from the build stage
COPY --from=build /pythontemplate /pythontemplate

# Set the working directory
WORKDIR /pythontemplate

SHELL ["/bin/bash", "-c"]

# RUN source venv/bin/activate

# Command to run the application (optional)
CMD source venv/bin/activate && python -m simple_python_template
